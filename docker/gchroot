#!/bin/bash
#
# gchroot - Gadgetron chroot command line tool
#
# Multi-purpose script for mounting and executing
# commands in chroot images. Mount points for images
# are created and managed at /mnt/gadgetron_chroot
#
# Michael S. Hansen (michael.schacht.hansen@gmail)
# 

# TODO:
#   - chroot image creation from docker (currently separate script)
#   - Copying of CUDA files into image (or should they be bind mounts)


#Script must be run as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

#Constant values
ME=$(basename "$0")
MNTFOLDER=/mnt/gadgetron_chroot
CHROOTPREFIX="chroot_"
MOUNTPOINT=""
INPUTMOUNTPOINT=""
COMMAND=""
REMOVE=0
BINDVOLUMES=()
VERBOSE=0

log()
{
    if [ "$VERBOSE" -gt 0 ]; then
        echo "$1"
    fi    
}

create_mnt_folder ()
{
    mkdir -p $MNTFOLDER
}

gen_mount_path()
{
    timestamp=$(date -u +%Y%m%d_%H%M%S)
    rnd=$RANDOM
    echo "${MNTFOLDER}/${CHROOTPREFIX}${rnd}_${timestamp}"
}

complete_mount_point()
{
    local mntpnt=$1

    #Give this full path name if only folder name
    if [ -e "${MNTFOLDER}/${mntpnt}" ]; then
	mntpnt=${MNTFOLDER}/$mntpnt
    fi

    #Remove trailing slash if it it has one
    mntpnt=${mntpnt%/} 
    echo "$mntpnt"
}

cmd_attach ()
{
    if [ "$#" -ne 1 ]; then
	echo "Invalid number of arguments supplied to create command"
	return 1
    fi
    
    local imgpath=$1
    if [ -z "$INPUTMOUNTPOINT" ]; then
	local mntpnt=$(gen_mount_path)
    else
	local mntpnt="${MNTFOLDER}/${CHROOTPREFIX}${INPUTMOUNTPOINT}"
    fi

    if [[ -e $mntpnt ]]; then
	echo "Error: mountpoint $mntpnt already exists"
	return 1
    fi
    
    if [ -d "$imgpath" ]; then
	rp=$(realpath $imgpath)
	ln -s $rp $mntpnt
    elif [ -f "$imgpath" ]; then
	mkdir -p $mntpnt
	mount -o loop $imgpath $mntpnt
    else
	return 1
    fi

    #Set global mount point variable
    MOUNTPOINT=$mntpnt

    mkdir -p ${MOUNTPOINT}/proc
    mkdir -p ${MOUNTPOINT}/sys
    mkdir -p ${MOUNTPOINT}/dev
    mount --bind /proc ${MOUNTPOINT}/proc 
    mount --bind /sys  ${MOUNTPOINT}/sys
    mount --bind /dev  ${MOUNTPOINT}/dev

    for i in "${BINDVOLUMES[@]}"
    do
	local volin=(${i//:/ })
	if [[ ${#volin[@]} -ne 2 ]]; then
	    echo "Invalid mount specification"
	    return 1
	fi
	local source=${volin[0]}
	local destination=${MOUNTPOINT}/${volin[1]}

	if [[ ! -e $source ]]; then
	    echo "Source for mount point: $source does not exist"
	    return 1
	fi
	
	if [[ ! -e $destination ]]; then
	    mkdir -p $destination
	fi
	
	mount --bind $source $destination 
    done

    #Make sure that networking is operational in chroot
    cp /etc/hosts ${MOUNTPOINT}/etc/

    #Make sure that the hostname is actually in the hosts file
    if [[ -z $(grep $HOSTNAME ${MOUNTPOINT}/etc/hosts) ]]; then
	echo "127.0.0.1 $HOSTNAME" >> ${MOUNTPOINT}/etc/hosts
    fi
    
    return 0
}

cmd_detach ()
{
    local mntpnt=$(complete_mount_point $1)
    
    if [ ! -e "$mntpnt" ]; then
	echo "Unable to remove non-existent mount point"
	return 1
    fi

    #Set global mount point variable
    MOUNTPOINT=$mntpnt

    #Removing any mount points
    mount | grep "${MOUNTPOINT}/" | while read -r line ; do
	local mp=$(echo $line|awk {'print $3'}) 
	log "Removing mountpoint $mp"
	umount $mp
    done
    
    if [[ -L "$MOUNTPOINT" && -d "$MOUNTPOINT" ]]; then
	rm $MOUNTPOINT
	return 0
    fi

    if [ -d "$MOUNTPOINT" ]; then
	umount $MOUNTPOINT
	rmdir $MOUNTPOINT
	return 0
    fi

    return 0
}

cmd_clean ()
{
    local mntpnt=$(complete_mount_point $1)
    
    if [ ! -e "$mntpnt" ]; then
	echo "Unable to remove non-existent mount point"
	return 1
    fi

    #Set global mount point variable
    MOUNTPOINT=$mntpnt

    fuser -k -m $MOUNTPOINT
    
    return 0
}

cmd_exec()
{
    local mntpnt=$(complete_mount_point $1)
    MOUNTPOINT=$mntpnt
    shift
    export LD_LIBRARY_PATH="/usr/local/lib:/usr/local/cuda/lib64:/opt/intel/mkl/lib/intel64:/opt/intel/lib/intel64"
    export GADGETRON_HOME="/usr/local"
    export ISMRMRD_HOME="/usr/local"
    export PATH="${PATH}:/usr/local/bin"
    chroot $MOUNTPOINT "$@"
}

cmd_run()
{

    if cmd_attach "$1"; then
	log "Attached $MOUNTPOINT"
    else
	echo "attach command failed with error code: $?"
	exit 1
    fi

    shift
    
    if cmd_exec $MOUNTPOINT "$@"; then
	log "exec ($MOUNTPOINT): $@"
    else
	echo "exec command failed with error code: $?"
    fi

    if [[ $REMOVE -eq 1 ]]; then
	if cmd_detach "$MOUNTPOINT"; then
	    log "detach ($MOUNTPOINT)"
	else
	    echo "detach command failed with error code: $?"
	    exit 1
	fi
    fi    
}

cmd_list()
{
    for m in ${MNTFOLDER}/${CHROOTPREXIF}*; do
	if [ -d "$m" ]; then
	    echo $m
	fi
    done
}

list_commands ()
{
    printf "  list                          : List mounted chroot images\n"
    printf "  exec <mount point> <command>  : Execute command in chroot\n"
    printf "  attach <img OR path>          : Prepare chroot (with mounts)\n"
    printf "  detach <mount point>          : Remove chroot mount point\n"
    printf "  run <img OR path> <command>   : Run command in image\n"
    printf "  clean <mount point>           : Remove all processes accessing mount point\n"
    printf "\n\n"
}

list_options ()
{
    printf "  -r | --rm | --remove           : Detach chroot after run\n"
    printf "  -n | --name <NAME>             : Use this name with attached chroot\n"
    printf "  -v | --volume <SRC:DST>        : Mount SRC at DST in chroot\n"
    printf "  --verbose                      : Verbose logging\n"
    printf "\n\n"
}
print_usage ()
{
    printf "\n"
    printf "Usage: "
    printf "\t%s <COMMAND> [OPTIONS] <ARGS>\n" "$ME"
    printf "\n"
    printf "Available commands:\n\n"
    list_commands
    printf "Available options\n\n"
    list_options
}

#We must have at least one command
if [ "$#" -lt 1 ]; then
    print_usage
    exit 1
fi

COMMAND=$1; shift

#Parse any command line options and store in global variables
while [[ $1 =~ ^- ]]; do 
    case $1 in
        -r  | --rm | --remove )        REMOVE=1
                                       ;;
	-n  | --name )                 shift
	                               INPUTMOUNTPOINT=$1
				       ;;
	-v  | --volume )               shift
	                               BINDVOLUMES+=($1)
				       ;;
	--verbose )                    VERBOSE=1
				       ;;
        * )                            echo "Unknown option $1"
	                               print_usage
                                       exit 1
    esac
    shift
done

#Make sure we have the mount folder
create_mnt_folder

case $COMMAND in
    "attach" )
	if cmd_attach "$@"; then
	    echo "$MOUNTPOINT"
	else
	    echo "attach command failed with error code: $?"
	    exit 1
	fi
	;;
    "detach" )
	if cmd_detach "$@"; then
	    echo "$MOUNTPOINT"
	else
	    echo "detach command failed with error code: $?"
	    exit 1
	fi
	;;
    "exec" )
	if cmd_exec "$@"; then
	    log "Executed ($MOUNTPOINT): $@"
	else
	    echo "exec command failed with error code: $?"
	    exit 1
	fi
	;;
	
    "run" )
	if cmd_run "$@"; then
	    log "Ran ($MOUNTPOINT): $@"
	else
	    echo "run command failed with error code: $?"
	    exit 1
	fi
	;;
    "list" )
	cmd_list
	;;
    "clean" )
	if cmd_clean "$@"; then
	    echo "$MOUNTPOINT"
	else
	    echo "clean command failed with error code: $?"
	    exit 1
	fi
	;;
    * )
	echo "Invalid command \"$COMMAND\""
	print_usage
esac
