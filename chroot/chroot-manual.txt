---INSTALLING GADGETRON Ubuntu 14.04---



*** Dependencies ***

sudo apt-get install build-essential git-core cmake gcc-multilib libace-dev libarmadillo-dev libboost-all-dev libfftw3-dev libgtest-dev libxslt-dev xsltproc libhdf5-serial-dev h5utils hdf5-tools libxml2-dev python-dev python-numpy python-libxml2 python-psutil python-h5py python-scipy python-twisted python-matplotlib dcmtk git doxygen libqt4-dev libglew1.6-dev docbook5-xml docbook-xsl-doc-pdf docbook-xsl-doc-html docbook-xsl-ns fop freeglut3-dev libxi-dev liblapack-dev



*** Steps to install CUDA 6.5 ***

1. sudo apt-get install build-essential

2. In order to be able to install nvidia driver (http://stackoverflow.com/questions/25463952/drm-ko-missing-for-cuda-6-5-ubuntu-14-04-aws-ec2-gpu-instance-g2-2xlarge)
sudo apt-get install linux-image-extra-virtual

3. Follow the instructions from: http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/index.html#ubuntu-installation or apply steps 1-11 from below:

    1. cd && wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_6.5-14_amd64.deb
    2. sudo dpkg -i cuda-repo-ubuntu1404_6.5-14_amd64.deb
    3. rm cuda-repo-ubuntu1404_6.5-14_amd64.deb
    4. sudo apt-get update
    5. sudo apt-get -y install cuda
    6. echo "" >> ~/.bashrc
    7. echo "export PATH=/usr/local/cuda-6.5/bin:$PATH" >> ~/.bashrc
    8. echo "export LD_LIBRARY_PATH=/usr/local/cuda-6.5/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc
 
    ## You should probably restart the system here
    9. sudo shutdown -r now
 
    ## Lets make the deviceQuery sample.  This is used to verify cuda works
    10. cd /usr/local/cuda/samples/1_Utilities/deviceQuery && sudo make
 
    # If you see all of your cards listed, and the last line says "Result = PASS" you're good to go!
    11. /usr/local/cuda/samples/1_Utilities/deviceQuery/deviceQuery

4. Check driver details: nvidia-smi



*** Steps to install MKL ***

If you would like to use MKL (Intel Math Kernel Library), please download your installation file from Intel and do the installation. 
Here is what we did with MKL version 11.0.5.192:

tar -xzvf l_mkl_11.0.5.192_intel64.tgz 
cd l_mkl_11.0.5.192_intel64/
sudo ./install.sh

Follow the instructions and add the following paths to your ~/.bashrc
echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/mkl/lib/intel64:/opt/intel/lib/intel64" >> ~/.bashrc

You will also need to install Armadillo from source, skip the libarmadillo-dev package above. 
Download latest armadillo from http://arma.sourceforge.net and unpack, build and install. 
If you have MKL installed, this will pick it up and build the armadillo libs against it.

cd armadillo-3.900.6/
cmake
make; sudo make install



*** Extras ***

Useful links (but not 100% accurate):
http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/index.html#ubuntu-installation
https://gist.github.com/zcshiner/4b32980792d367222304
http://www.r-tutor.com/gpu-computing/cuda-installation/cuda6.5-ubuntu
http://askubuntu.com/questions/451672/installing-and-testing-cuda-in-ubuntu-14-04

MH Useful links:
https://sourceforge.net/p/gadgetron/discussion/general/thread/d0ee5b27/
https://sourceforge.net/p/gadgetron/home/Linux%20Installation/


------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------


---CHROOT---


1. apt-get update

2. apt-get install debootstrap -y

3. sudo debootstrap --variant=buildd --arch amd64 trusty /opt/chroot/trusty http://gb.archive.ubuntu.com/ubuntu/

4. Place this script to /opt/chroot/chrootmounter.sh
------------------------------------------------------------------------------------------
#!/bin/bash
  
if [ $# -eq 2 ]; then
  
 if [ "$1" == "mount" ]; then
  sudo mount --bind /dev "${2}/dev"
  sudo mount --bind /sys "${2}/sys"
  sudo mount --bind /proc "${2}/proc"
  
  exit 0
 fi
  
 if [ "$1" == "umount" ]; then
  sudo umount "${2}/dev"
  sudo umount "${2}/sys"
  sudo umount "${2}/proc"
  
  exit 0
 fi
  
 echo -e "\nUsage:  $0 (mount or umount) (chrootdir)\n"
 exit 1
  
else
 echo -e "\nUsage:  $0 (mount or umount) (chrootdir)\n"
 exit 1
fi
------------------------------------------------------------------------------------------

5. chmod +x /opt/chroots/chrootmounter.sh

6. Run the script: ./chrootmounter.sh mount /opt/chroot/trusty (check if it worked with mount command)

*7. Make sure that /etc/resolv.conf is the same on 'real' computer and on 'chroot' one (if not, copy the file from the real one)

*8. Copy/Extend your /etc/apt/sources.list (make sure you are using the correct version of Ubuntu Repos):
  sudo cp /etc/apt/sources.list /opt/chroot/trusty/etc/apt/sources.list
 
9. Run: /home/ubuntu/perl_scripts/generate_gadgetron_root <Arg 1> <Arg 2>
  Arg 1: Gadgetron root: /usr/local/gadgetron
  Arg 2: New root: /opt/chroot/trusty

10. Enter the new environment: sudo chroot /opt/chroot/trusty

*11. Install additional software. For example:
  apt-get update
  apt-get dist-upgrade -y
  apt-get install nano vim htop less dialog -y

12. Set the PATH and LD_LIBRARY_PATH variable:
  export PATH=$PATH:/usr/local/gadgetron/bin
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH/usr/local/gadgetron/lib:/usr/local/lib:/usr/local/cuda-6.5/lib64:/opt/intel/mkl/lib/intel64:/opt/intel/lib/intel64


*** Extras ***

Useful links:
https://help.ubuntu.com/community/BasicChroot
http://ocsovszki-dorian.blogspot.com/2014/06/building-chroot-environment-ubuntu-1404.html




gtplus_FetalHASTE.cfg
