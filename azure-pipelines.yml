variables:
  AzureConnection: 'BiomedicalImaging-NonProd(87d8acb3-5176-4651-b457-6ab9cefd8e3d)'
  imageBaseName: 'ghcr.io/gadgetron/gadgetron/gadgetron_ubuntu'
  DOCKER_BUILDKIT: 1
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  isCI: $[or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI'))]

pool: gadgetron-gpu-nodes

# Trigger when merging to master
trigger:
- master

# Trigger for PRs that merge to master
pr:
- master

jobs:
- job: BuildAndTest
  displayName: "Build, Unit and Integration tests"
  strategy:
    matrix:
      cuda:
        flavor: cuda
        requirements: python,cuda
      nocuda:
        flavor: nocuda
        requirements: python
  steps:
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: $(AzureConnection)
      keyVaultName: gadgetron-build-secrets
  - script: |
        set -e
        # First build a dev image and run unit tests
        stage_name="gadgetron_$(flavor)build"
        docker build --target ${stage_name} -t ${stage_name} .
        test_command=". /opt/conda/etc/profile.d/conda.sh \
            && conda activate gadgetron \
            && /opt/code/gadgetron/build/test/test_all \
            && /opt/code/gadgetron/build/apps/gadgetron/test/server_tests"
        docker run --gpus=all ${stage_name} /bin/bash -c "$test_command"
    displayName: "Run unit tests"
  - script: |
        set -e
        ./build-images.sh --type dev --type rt --flavor $(flavor) --base-name $(imageBaseName) --tag $(build.BuildNumber)
        cd test/integration && python3 get_data.py && cd ../../ 
        fullImageName="$(imageBaseName)_rt_$(flavor):$(build.BuildNumber)"
        ./docker/integration-test-image.sh --image ${fullImageName} --ignore-requirements $(requirements) --gpus all --cases cases/*
    displayName: "Run integration tests"
  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: 'junit.xml'
      failTaskOnFailedTests: true
      buildPlatform: "$(imageBaseName)_rt_$(flavor)"
  - script: |
      set -e
      echo "$(ghcr-pat)" | docker login ghcr.io -u $(ghcr-user) --password-stdin
      ./build-images.sh --type dev --type rt --flavor $(flavor) --base-name $(imageBaseName) --tag $(build.BuildNumber) --push
      ./build-images.sh --type dev --type rt --flavor $(flavor) --base-name $(imageBaseName) --tag latest --push
    displayName: 'Push images'
    condition: and(succeeded(), eq(variables.isCI, 'true'))
